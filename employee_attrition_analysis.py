# -*- coding: utf-8 -*-
"""Employee-Attrition-Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MakAsKijMblb33oo1huAEKstFrZkrU97
"""

#importing the needed libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Preparation
Here, I read in the datasets into my code file and work towards cleaning the data. This involves droping certain columns I don't need and adding columns I think will help make my work easier. I also print certain of the data to make sure its in the form i want.
"""

#reading in the data
current_emp = pd.read_excel('data.xlsx', sheet_name = 'Existing employees')
ex_emp = pd.read_excel('data.xlsx', sheet_name = 'Employees who have left')

#printing the heads of the current_emp() data
current_emp.head()

#printing the heads of the current_emp() data
ex_emp.head()

"""## Exploratory Data Analysis
Here, I seek to gain in-depth knowledge and understanding of the data and problem. I use numerous python methods and functions to exploer all aspects of the data I have.
"""

#checking the data
current_emp.isnull().sum()

current_emp.shape

ex_emp.isnull().sum()

ex_emp.shape

current_emp.columns

ex_emp.columns

#now we add a new column called 'emp_status' to both data
#all current employees will have the value 'current'
#all ex-employees will have the value 'ex'
current_emp['emp_status'] = 'current'
ex_emp['emp_status'] = 'ex'

current_emp.columns

ex_emp.columns

#joining the data sets
data_join = [current_emp, ex_emp]

all_emp = pd.concat(data_join)

all_emp

all_emp.isnull().sum()

all_emp.shape

all_emp.drop('Emp ID', inplace=True, axis=1)

all_emp.isnull().sum()

"""## Correlation matrix
here, I seek to find out the correlation of data fron both data sets using a pairplot correlation marix and a correlation heatmap
"""

#plotting a correlation matrix to compare the values of the joined data
sns.set(rc={'figure.figsize':(30.7,8.27)})
g = sns.pairplot(all_emp, hue = 'emp_status');
plt.savefig('CorrelationPairPlot.png')

sns.heatmap(all_emp.corr())
plt.savefig('CorrelationHeatmap.png')

"""From the correlations above we can note the following:

-Slight positive correlation between number of projects and average monthly hours worked
-Employees that left the company tend to have low satisfaction levels

## Data Visualization
Here I seek to notice and understand factors of employee attrition by visualizing data and noticing certain trands from the data
"""

sns.scatterplot(x=all_emp["satisfaction_level"], y=all_emp["last_evaluation"], hue=all_emp["emp_status"])
plt.savefig('Satisfaction-Last_eval.png')

"""from the scatter plot above, we can tell that current employees tend to have higher satisfaction and more frequent evaluations as compared to ex-employees"""

sns.scatterplot(x=all_emp["average_montly_hours"],y=all_emp["time_spend_company"],hue=all_emp["emp_status"])
plt.savefig('avg_hours-time_spent.png')

sns.set(rc={'figure.figsize':(50.7,10.27)})
sns.countplot(all_emp["average_montly_hours"], hue=all_emp["emp_status"])
plt.savefig('average_monthly_hours.png')

all_emp['average_montly_hours'].max()

all_emp['average_montly_hours'].min()

all_emp.columns

sns.countplot(all_emp['time_spend_company'], hue = all_emp['emp_status'])
plt.savefig('time_spent.png')

sns.countplot(all_emp['last_evaluation'], hue = all_emp['emp_status'])
plt.savefig('last_eval.png')

sns.countplot(all_emp['satisfaction_level'], hue = all_emp['emp_status'])
plt.savefig('satisfaction_level.png')

sns.scatterplot(x=all_emp['last_evaluation'], y=all_emp['satisfaction_level'], hue= all_emp['emp_status'])

"""From the visualisations above, we can infer that there are three distinct groups of employees that left the company:

Group 1 : low evaluation score, low satisfaction level, low hours worked. based on their hours worked, would probably consists mostly of unmotivated workers or part-time workers. May be subjected to other variables.

Group 2 : high evaluation score, high satisfaction level, high hours worked. Due to their high contribution, they are likely to leave the company to pursue a better opportunity presented (such as poaching/headhunting by other company).

Group 3 : very high evaluation score, very low satisfaction level, very high hours worked. Likely to leave the company due to being overworked.

# Constructing Predictive Models
"""

#splitting data into training and testing data
#droping columns we dont need for the model
all_emp.drop('dept', inplace= True, axis= 1)

all_emp.columns

#enconding aspects of data for machine learning
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
all_emp['emp_status'] = le.fit_transform(all_emp['emp_status'])
all_emp['salary'] = le.fit_transform(all_emp['salary'])
all_emp['salary']

all_emp['emp_status']

#with the encoded values of 'salary',  0 stands for high, 1 for low and 2 for medium
current_emp.head()

ex_emp.head()

all_emp.head()

X= all_emp[['satisfaction_level', 'last_evaluation', 'number_project',
       'average_montly_hours', 'time_spend_company', 'Work_accident',
       'promotion_last_5years', 'salary']].values
Y = all_emp[['emp_status']].values

X

Y

X.shape

Y.shape

"""Splitting into train and test data"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = .35)

from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

SVC = SVC()
KNN = KNeighborsClassifier()
DTC = DecisionTreeClassifier()
LR = LogisticRegression()
RF = RandomForestClassifier()

SVC.fit(X_train, y_train)
KNN.fit(X_train, y_train)
DTC.fit(X_train, y_train)
LR.fit(X_train, y_train)
RF.fit(X_train, y_train)

#Predicting the values
DTC_prediction = DTC.predict(X_test)
KNN_prediction = KNN.predict(X_test)
SVC_prediction = SVC.predict(X_test)
LR_prediction = LR.predict(X_test)
RF_prediction = RF.predict(X_test)

#checking the accuracy score and confusion matrix and classification report of our model
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
def Performance(Prediction , actualValue, model):
    print(f"Accuracy score for {model} is {accuracy_score(Prediction, actualValue)}")
    print('\n')
    print(f"confussion matrix for {model} is '\n' {confusion_matrix(Prediction, actualValue)}")
    print('\n')
    print(f"classification report for {model} is {classification_report(Prediction, actualValue)}")

Performance(DTC_prediction, y_test, 'Decision Tree')

Performance(KNN_prediction, y_test, 'K-Nearest Neighbors')

Performance(SVC_prediction, y_test, 'Support Vector Machine')

Performance(LR_prediction, y_test, 'Logistic Regression')

Performance(RF_prediction, y_test, 'Random Forest')

# creating a dataframe of the accuracy scores
acc_score = [['Decision tree',0.9765714285714285], ['K-Nearest Neighbors', 0.944], ['Support Vector Machine', 0.7811428571428571], ['Logistic Regression',0.7632380952380953], ['Random Forest',0.9908571428571429]]
df = pd.DataFrame(acc_score, columns = ['Model', 'Accuracy'])
df.set_index('Model', inplace=True)

df

"""With results from the Accuracy scores, we can see that the Random Forest Classifier most accurately predicts the outcome of employees in the company"""

df.plot(kind='bar', title = 'Model Accuracy Comparism Graph')
plt.savefig('Model Accuracy Comparism Graph.png')

"""# Drawing conclusions fron my analysis
**From the analysis performed, I can conclude that:**


*   some employees left the company with no specific traits or factors that influenced them to leave 

*   some employees left the company in search for better positions in other companies since they didn't seem to have any underlying factors for leaving
*   some employees left the company because they are being overworked

*   Officials should make sure not to give employees more that 6 projects per month
*   Officials should look out for employees with satisfaction scores of below 0.5. P
ersonal engagement is advised for such employees

*   Officials should make sure not to work employees for more than 250 hours averagely per month as this may cause employees to leave the company as a result of being overworked.
"""

